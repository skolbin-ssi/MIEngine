<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--NOTE: this code was borrowed from Roslyn. See http://index/#MSBuildItem=AssemblyVersionAttribute or C\R\Main\Open\Tools\Microsoft.CodeAnalysis.Toolset.Open\Targets\GenerateAssemblyInfo.targets -->
  <PropertyGroup>
    <GeneratedAssemblyInfoFile>$(IntermediateOutputPath)GeneratedAssemblyInfo$(DefaultLanguageSourceExtension)</GeneratedAssemblyInfoFile>
  </PropertyGroup>

  <Import Project=".\Analyzers.targets" />

  <PropertyGroup>
    <CoreCompileDependsOn>GenerateAssemblyInfoFile;$(CoreCompileDependsOn)</CoreCompileDependsOn>
    <BuildDependsOn>$(BuildDependsOn);GenerateMonoSymbols</BuildDependsOn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Mono.Unofficial.pdb2mdb" Version="4.2.3.4" GeneratePathProperty="true" />
  </ItemGroup>

  <Target Name="GenerateMonoSymbols"
          Condition="'$(IsXPlat)' == 'true' AND '$(ShouldGenerateMonoSymbols)' == 'true'"
          AfterTargets="Build" >
    <!-- If we're building the Desktop config on Windows, run pdb2mdb to generate Mono symbols as well -->
    <Exec Command="&quot;$(PkgMono_Unofficial_pdb2mdb)\tools\pdb2mdb.exe&quot; &quot;$(TargetPath)&quot;" />
  </Target>

  <Target Name="GlassDirCopy" Condition="'@(GlassDirCopy)' != ''" AfterTargets="Build">
    <MakeDir Condition="!Exists($(GlassDir))" Directories="$(GlassDir)" />
    <Copy SourceFiles="@(GlassDirCopy)" DestinationFolder="$(GlassDir)" />
  </Target>

  <!-- Depends on PrepareForBuild because the latter is responsible for calling MakeDir(IntermediateOutputPath). 
  Without it, if we do a design-time build of a project (e.g. in Workspace.LoadSolution) immediately following
  a tfpt treeclean, WriteCodeFragment may fail because the obj folder doesn't even exist at that time.  -->
  <Target Name="GenerateAssemblyInfoFile"
          Inputs="$(MSBuildThisFileFullPath)"
          Outputs="$(GeneratedAssemblyInfoFile)"
          DependsOnTargets="PrepareForBuild"
          Condition="'$(Language)' == 'C#' or '$(Language)' == 'VB'">

    <Error Condition="'$(BuildVersion)'==''" Text="'BuildVersion' is not defined. Try rebuilding clean. If the problem presists, make sure gdb.settings.targets is included in this project."/>
    <Error Condition="'$(AssemblyVersion)'==''" Text="'AssemblyVersion' is not defined. Try rebuilding clean. If the problem presists, make sure gdb.settings.targets is included in this project."/>

    <ItemGroup>
      <AssemblyAttribute Include="System.Reflection.AssemblyCompanyAttribute">
        <_Parameter1>Microsoft Corporation</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="System.Reflection.AssemblyProductAttribute">
        <_Parameter1>Microsoft ® Visual Studio ®</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="System.Reflection.AssemblyCopyrightAttribute">
        <_Parameter1>© Microsoft Corporation. All rights reserved.</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="System.Reflection.AssemblyVersionAttribute">
        <_Parameter1>$(AssemblyVersion)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="System.Reflection.AssemblyFileVersionAttribute">
        <_Parameter1>$(BuildVersion)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="System.Reflection.AssemblyInformationalVersionAttribute">
        <_Parameter1>$(BuildVersionExtended)</_Parameter1>
      </AssemblyAttribute>
    </ItemGroup>

    <WriteCodeFragment AssemblyAttributes="@(AssemblyAttribute)"
                       Language="$(Language)"
                       OutputFile="$(GeneratedAssemblyInfoFile)">
      <Output TaskParameter="OutputFile" ItemName="Compile" />
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
    </WriteCodeFragment>
  </Target>
  
  <!-- Source Link -->
  <PropertyGroup Condition="'$(EnableSourceLink)' == 'true' and '$(BUILD_SOURCEVERSION)' != ''">
    <SourceLink>$(IntermediateOutputPath)SourceLink.json</SourceLink>
  </PropertyGroup>
  
  <Target Name="CreateSourceLinkJson"
          Condition="'$(SourceLink)' != ''"
          BeforeTargets="CoreCompile">
    <PropertyGroup>
      <EscapedRepositoryRoot>$(MIEngineRoot.Replace("\", "\\"))</EscapedRepositoryRoot>
      <SourceLinkDir>$([System.IO.Path]::GetDirectoryName('$(SourceLink)'))</SourceLinkDir>
      
      <JsonString>
{
  "documents": {
    "$(EscapedRepositoryRoot)*": "https://raw.githubusercontent.com/Microsoft/MIEngine/$(BUILD_SOURCEVERSION)/*"
  }
}
      </JsonString>
    </PropertyGroup>

    <MakeDir Condition="!Exists('$(SourceLinkDir)')" Directories="$(SourceLinkDir)"/>
    <WriteLinesToFile File="$(SourceLink)" Lines="$(JsonString)" Overwrite="true"/>
  </Target>

  <!-- ResolveProjectReferences allows us to generate the dll from il before adding them as a reference -->
  <Target Name="GenerateAssemblies" 
          Condition="'@(GenerateAssembly)' != ''" 
          Inputs="@(GenerateAssembly)" 
          Outputs="@(GenerateAssembly->'$(GeneratedAssembliesDir)%(FileName).dll')" 
          BeforeTargets="ResolveProjectReferences">
    <PropertyGroup>
      <IlAsmCommand>"$(windir)\Microsoft.NET\Framework\v4.0.30319\ilasm.exe"</IlAsmCommand>
      <IlAsmFlags>$(IlAsmFlags) /DLL /quiet</IlAsmFlags>
    </PropertyGroup>
    <MakeDir Condition="!Exists('$(GeneratedAssembliesDir)')" Directories="$(GeneratedAssembliesDir)" />
    <Exec Command="$(IlAsmCommand) $(IlAsmFlags) /out=&quot;$(GeneratedAssembliesDir)%(FileName).dll&quot; @(GenerateAssembly->'&quot;%(Identity)&quot;')" />
  </Target>
</Project>
